#!/usr/bin/env bash
set -e
[ -n "$EXENV_DEBUG" ] && set -x

print_set_version() {
  echo "<version> should be a string matching a Elixir version known by exenv."

  local versions="$(exenv-versions --bare)"
  if [ -z "$versions" ]; then
    echo "There are currently no Elixir versions installed for exenv."
  else
    echo "The currently installed Elixir versions are:"
    echo "$versions" | sed 's/^/  /'
  fi

  echo
  echo "The special version string 'system' will use your default system Elixir."
}

case "$1" in
"") echo "usage: exenv <command> [<args>]

Some useful exenv commands are:
   commands      List all exenv commands
   rehash        Rehash exenv shims (run this after installing binaries)
   global        Set or show the global Elixir version
   local         Set or show the local directory-specific Elixir version
   shell         Set or show the shell-specific Elixir version
   version       Show the current Elixir version
   versions      List all Elixir versions known by exenv
   which         Show the full path for the given Elixir command

See 'exenv help <command>' for information on a specific command.
For full documentation, see: https://github.com/sstephenson/exenv#readme"
;;
commands) echo "usage: exenv commands
       exenv commands --sh
       exenv commands --no-sh

List all exenv commands."
;;
global) echo "usage: exenv global <version>

Sets the global Elixir version. You can override the global version at
any time by setting a directory-specific version with \`exenv local'
or by setting the EXENV_VERSION environment variable.

$(print_set_version)"
;;
local) echo "usage: exenv local <version>
       exenv local --unset

Sets the local directory-specific Elixir version by writing the version
name to a file named '.elixir-version'.

When you run a Elixir command, exenv will look for an '.elixir-version'
file in the current directory and each parent directory. If no such
file is found in the tree, exenv will use the global Elixir version
specified with \`exenv global', or the version specified in the
EXENV_VERSION environment variable.

$(print_set_version)"
;;
shell) echo "usage: exenv shell <version>
       exenv shell --unset

Sets a shell-specific Elixir version by setting the 'EXENV_VERSION'
environment variable in your shell. This version overrides both
project-specific versions and the global version.

$(print_set_version)"
;;
versions) echo "usage: exenv versions
       exenv versions --bare

Lists all Elixir versions known by exenv."
;;
which) echo "usage: exenv which <command>

Displays the full path to the binary that exenv will execute when you
run the given command."
;;
whence) echo "usage: exenv whence <command>

Lists all Elixir versions with the given command installed."
;;
*)
  command_path="$(command -v "exenv-$1" || true)"
  if [ -n "$command_path" ]; then
    echo "Sorry, the \`$1' command isn't documented yet."
    echo
    echo "You can view the command's source here:"
    echo "$command_path"
    echo
  else
    echo "exenv: no such command \`$1'"
  fi
esac
